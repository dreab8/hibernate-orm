/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
		classpath 'org.hibernate.build.gradle:hibernate-matrix-testing:2.0.0.Final'
		classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
		classpath 'org.hibernate.build.gradle:gradle-xjc-plugin:1.0.2.Final'
		classpath 'gradle.plugin.com.github.lburgazzoli:gradle-karaf-plugin:0.1.1'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.7'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
		classpath 'de.thetaphi:forbiddenapis:2.5'
	}
}

plugins {
	id 'com.gradle.build-scan' version '1.16'
	id 'me.champeau.buildscan-recipes' version '0.2.3'
}

ext {
	versionFile = rootProject.file( 'gradle/version.properties' )

}

gradle.rootProject() {
	System.out.println( ">>>>> beforeEvaluate" )
	if ( project.hasProperty( "releasedVersion" ) ) {
		def version = project.getProperty( "releasedVersion" )
		if ( !version ) {
			def ormVersion = HibernateVersion.fromProperties(project.versionFile)
			version = "${ormVersion.family}.${ormVersion.microVersion}.Final"
		}
		ant.propertyfile( file: project.versionFile.canonicalPath ) {
			entry( key: 'ormversion', type: 'string', operation: '=', value: "${version}" )
		}
	}
}

allprojects {
	repositories {
		mavenCentral()
		//Allow loading additional dependencies from a local path;
		//useful to load JDBC drivers which can not be distributed in public.
		if (System.env['ADDITIONAL_REPO'] != null) {
			flatDir {
				dirs "${System.env.ADDITIONAL_REPO}"
			}
		}
	}
	apply plugin: 'idea'

	// minimize changes, at least for now (gradle uses 'build' by default)..
	buildDir = "target"
}

def hasUpdateVersion = false

gradle.getTaskGraph(  ).whenReady {
	graph ->
		if(graph.hasTask( updateVersion )){
			hasUpdateVersion = true;
		}
}

gradle.buildFinished{
			def nextVersion;
			if ( hasUpdateVersion ) {

				if ( project.hasProperty( "nextVersion" ) ) {
					nextVersion = project.getProperty( "nextVersion" )
				}
				else {
					def ormVersion = HibernateVersion.fromProperties( project.versionFile )
					def nextMicro = ormVersion.microVersion + 1
					nextVersion = "${ormVersion.family}.${nextMicro}-SNAPSHOT"
				}
				ant.propertyfile( file: versionFile.canonicalPath ) {
					entry( key: 'ormversion', type: 'string', operation: '=', value: "${nextVersion}" )
				}
			}
}

task updateVersion {

}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release Task

task release {
	description = "The task performed when we are performing a release build.  Relies on " +
			"the fact that subprojects will appropriately define a release task " +
			"themselves if they have any release-related activities to perform"

	// Force to release with JDK 8. Releasing with JDK 11 is not supported yet:
	// - the hibernate-orm-modules tests do not run due to an issue with the ASM version currently used by Gradle
	doFirst {
		if ( !JavaVersion.current().isJava8() ) {
			throw new IllegalStateException( "Please use JDK 8 to perform the release." )
		}
	}
}

task publish {
	description = "The task performed when we want to just publish maven artifacts.  Relies on " +
			"the fact that subprojects will appropriately define a release task " +
			"themselves if they have any release-related activities to perform"
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// CI Build Task

task ciBuild {
	description = "The task performed when one of the 'main' jobs are triggered on the " +
			"CI server.  Just as above, relies on the fact that subprojects will " +
			"appropriately define a release task themselves if they have any tasks " +
			"which should be performed from these CI jobs"
}


wrapper {
	gradleVersion = '4.10.3'
	distributionType = Wrapper.DistributionType.ALL
}


buildScan {
	licenseAgreementUrl = 'https://gradle.com/terms-of-service'
	licenseAgree = 'yes'
}

buildScanRecipes {
	recipe 'git-commit', baseUrl: 'https://github.com/hibernate/hibernate-orm/tree'
}

//idea {
//    project {
//		jdkName = baselineJavaVersion
//		languageLevel = baselineJavaVersion
//
//		vcs = 'Git'
//    }
//    module {
//        name = "hibernate-orm"
//    }
//}



